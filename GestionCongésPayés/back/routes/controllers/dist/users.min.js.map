{"version":3,"sources":["users.js"],"names":["require","config","Users","Holidays","Demandes","Types","Statuses","express","jwt","refreshTokens","generateAccessToken","user","sign","process","env","ACCESS_TOKEN_SECRET","expiresIn","calculateCongesPayes","startingDate","fullMonths","Date","getMonth","getFullYear","today","num","refreshToken","daysPast","i","setDate","day","getDay","firstWorkingDay","getDate","year","month","days","res","daysWorked","err","sendStatus","parseFloat","toFixed","error","send","updateHoliday","holiday","role","dateWorked6months","setMonth","totalPaidLeaves","holidaysTaken","holidaysAvailable","exports","createUser","req","regeneratorRuntime","async","_context","prev","next","awrap","create","then","createdUser","idUser","id","body","UserId","t0","stop","getAll","users","_context2","findAll","include","sent","json","totalConge","getUserById","_context3","params","model","userLogin","userName","password","userjwt","accessToken","_context4","findOne","where","name","REFRESH_TOKEN_SECRET","accesstoken","refreshtoken","token","includes","verify","_context5","userLogOut","_context6","filter","deleteUserById","demandes","_context7","destroy","forEach","el","updateUser","objUser","_context9","findByPk","update","returning","updatedUser","holidayUpdate","newUser","_context8","updateUserHoliday","_context10"],"mappings":"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","file":"users.min.js","sourcesContent":["require('../../config/db');\nrequire('dotenv').config();\nconst { Users } = require(\"../../models\");\nconst { Holidays } = require(\"../../models\");\nconst { Demandes } = require(\"../../models\");\nconst { Types } = require(\"../../models\");\nconst { Statuses } = require(\"../../models\");\n\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\nconst app = express();\n\nlet refreshTokens = [];\n\n\n\n// to create users\nexports.createUser = async (req, res) => {\n    try{\n        const user = req.body;\n        await Users.create(user).then(createdUser=>{\n            res.json(createdUser); // return created user\n            const idUser = createdUser.id;\n            const role = createdUser.role;\n            const startingDate = createdUser.firstWorkingDay;\n            if(role==2||role==3){ // si user n'est pas admin, create holiday\n            // to get the date of 6 months after first working date\n                const dateWorked6months = new Date(new Date(startingDate).setMonth(new Date(startingDate).getMonth()+6));\n                let totalConge;\n                if( new Date() >= dateWorked6months){ // if this employee has been working for more than 6 months\n                    // to calculate days of congés payés\n                    totalConge = calculateCongesPayes(startingDate);    \n                } else { // if this employee has not been working for more than 6 months\n                    totalConge = 0;  // no congés payés normale available\n                }            \n                const holiday = {\n                    \"UserId\": [idUser],\n                    \"holidaysAvailable\": totalConge,\n                    \"holidaysTaken\": 0\n                    };\n                Holidays.create(holiday); //to create this employee's paid leaves\n            }    \n        });    \n    } catch (error) {\n        res.send(error);\n        }\n};\n\n// to get all the users\nexports.getAll = async (req, res) => {\n    try{\n        const users = await Users.findAll({ \n            include: [ Demandes, Holidays ]\n        });\n        res.json(users); // to return the list of users\n    }catch (error) {\n        res.send(error);\n    }\n};\n\n// to get user by id\nexports.getUserById = async (req, res) => {\n    try {\n        const id = req.params.id;\n        const user = await Users.findByPk(id, { \n            include: [ {\n                model: Demandes,\n                include: [ Types, Statuses ]\n            },\n            \n                Holidays ]\n        });\n        res.json(user);  \n    }catch (error) {\n        res.send(error);\n    }    \n};\n\n// to get user by userName to login\nexports.userLogin = async (req, res) => {\n    try{\n        const userName = req.body.userName;\n        const password = req.body.password;\n        const user = await Users.findOne({\n            where: {userName: [userName], password: [password]},\n            include: [{ model: Demandes, include: [Types, Statuses] }, Holidays ]\n        });\n        if (user) {\n            const userjwt = { name: userName, role: user.role };\n            const accessToken = generateAccessToken(userjwt);\n            const refreshToken = jwt.sign(userjwt, process.env.REFRESH_TOKEN_SECRET);\n            res.json({user: user, accesstoken: accessToken, refreshtoken: refreshToken});\n        } else {\n            res.json(null);\n        }\n    }catch (error) {\n        res.send(error);\n    }\n};\n\nexports.userToken = async (req, res) => {\n    try{\n        const refreshToken = req.body.token;\n        if (refreshToken == null) return res.sendStatus(401);\n        if (!refreshTokens.includes(refreshToken)) return res.sendStatus(403);\n        jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET, (err, user) => {\n            if (err) return res.sendStatus(403);\n        //    const accessToken = generateAccessToken(name: user.userName)\n        });\n    }catch (error) {\n        res.send(error);\n    }\n};\n\nfunction generateAccessToken(user) {\n    return jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '15m' });\n}\n\nexports.userLogOut = async (req, res) => {\n    refreshTokens = refreshTokens.filter(token => token !== req.body.token);\n    res.sendStatus(204);\n};\n\n\n// to delete user by id\nexports.deleteUserById = async (req, res) => {\n    try {\n        const id = req.params.id;\n        const holiday = await Holidays.findOne({\n            where: {UserId: [id]}\n        });\n        const demandes = await Demandes.findAll({\n            where: {UserId: [id]}\n        });\n        // if this user has holidays, delete his holidays\n        if(holiday){ \n            await Holidays.destroy({where: {UserId: [id]}});\n        }\n        // if this user has demandes, delete them\n        if(demandes){\n            demandes.forEach(el => {\n                Demandes.destroy({where: {UserId: [id]}});\n            });\n        }\n        // delete this user\n        await Users.destroy({where: {id: [id]}}); \n        res.json(\"user and user's holidays are deleted\");     \n    }catch (error) {\n        res.send(error);\n    }\n\n};\n\n// to update user\nexports.updateUser = async (req, res) => {\n    try {\n        const id = req.body.id;\n        const user = await Users.findByPk(id);  \n        if(user){ // si user exists\n            let objUser = req.body;\n            delete objUser.id;     \n            await Users.update(objUser,{    // update user\n                where: { \n                    id : [id]\n                },\n                returning: true\n            }).then(async ()=>{\n                // get and return this user after being updated\n                const updatedUser = await Users.findByPk(id);          \n                const holiday = await Holidays.findByPk(id);\n                const holidayUpdate = updateHoliday(updatedUser, holiday);\n                if(holidayUpdate){\n                    Holidays.update(holidayUpdate,{    // update user\n                        where: { \n                            UserId : [id]\n                        }\n                    });  \n                }\n                const newUser = await Users.findByPk(id, {\n                    include: [ Holidays]\n                });\n                res.json(newUser);\n            });\n        } else {\n            res.json(\"user doesn't exist\");\n        }\n    }catch (error) {\n        res.send(error);\n    }\n};\n\nexports.updateUserHoliday = async (req, res) => {\n    try {\n        const id = req.params.idUser;   \n        // get and return this user after being updated\n        const updatedUser = await Users.findByPk(id);\n            // return updated user    \n        const holiday = await Holidays.findOne({\n            where: { UserId: [id]}\n        });\n        const holidayUpdate = updateHoliday(updatedUser, holiday);\n        if(holidayUpdate){\n            Holidays.update(holidayUpdate,{    // update user\n                where: { \n                    UserId : [id]\n                }\n            });  \n        }\n        res.json(holidayUpdate) ;\n    }catch (error) {\n        res.send(error);\n    }\n};\n\n\nfunction calculateCongesPayes(startingDate){\n    try {\n        const fullMonths = new Date().getMonth() -startingDate.getMonth()-1 +12 * (new Date().getFullYear() - startingDate.getFullYear());\n        // to calculate worked days of current month\n        const today = new Date();\n        const num = today.getDate();\n        let daysPast = 0;\n        for(let i=1; i<=num; i++){     \n            today.setDate(i);\n            let day = today.getDay();\n            if(!(day==0 || day == 6)){\n                daysPast += 1;\n            }               \n        }\n    // to calculate worked days of first working months\n        const firstWorkingDay = startingDate.getDate();\n        const year = startingDate.getFullYear();\n        const month = startingDate.getMonth()+1;\n        const days = new Date(year, month, 0).getDate();\n        let daysWorked = 0;\n        for(let i=firstWorkingDay; i<=days; i++){     \n            startingDate.setDate(i);\n            let day = startingDate.getDay();\n            if(!(day==0 || day == 6)){\n                daysWorked += 1;\n            }               \n        }   \n        const totalConge = parseFloat(fullMonths*2.5 + 2.5/21*(daysPast+daysWorked)).toFixed(1); \n        return totalConge;\n    } catch (error) {\n        res.send(error);\n    }           \n}\n\nfunction updateHoliday(user, holiday){\n    try {\n        const role = user.role;\n        if(role==2 || role==3){ // try to update user's holiday if user is employee or manager\n            const startingDate = user.firstWorkingDay;\n            const dateWorked6months = new Date(new Date(startingDate).setMonth(new Date(startingDate).getMonth()+6));\n                // recalculate paid leaves\n            if( new Date() >= dateWorked6months){ //update user's holiday if user has been working for more than 6 months \n                const totalPaidLeaves = calculateCongesPayes(startingDate);\n                const holidaysTaken = holiday.holidaysTaken;\n                const holidaysAvailable = totalPaidLeaves - holidaysTaken;\n                const holidayUpdate = {\n                    \"holidaysAvailable\": holidaysAvailable, \n                    \"holidaysTaken\": holidaysTaken\n                    };\n                return holidayUpdate;\n            }\n        }    \n    } catch (error) {\n        res.send(error);\n    }   \n}"]}